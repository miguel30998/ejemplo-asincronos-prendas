

services:
  #clothing:
  #  build: ./clothing
  #  ports:
  #    - "8081:8081"
  #  environment:
  #    - "clothing-db=clothing-db"
  #    - "URL_DEFAULT_ZONE=http://eureka-server:8761/eureka"
  #    - "CONFIG_SERVER=config-server"
  #    - "EUREKA_SERVER=eureka-server"
  #  restart: always
  #  depends_on:
  #    - config-server
  #users:
  #  build: ./users
  #  ports:
  #    - "8080:8080"
  #  environment:
  #    - "users-db=users-db"
  #    - "URL_DEFAULT_ZONE=http://eureka-server:8761/eureka"
  #    - "CONFIG_SERVER=config-server"
  #    - "EUREKA_SERVER=eureka-server"
  #    - "gateway-host=gateway-server"
  #  restart: always
  #  depends_on:
  #    - config-server
  config-server:
    build: ./config-server
    hostname: config-server
    ports:
      - "8888:8888"
    restart: always

  eureka-server:
    build: ./eureka-server
    hostname: eureka-server
    ports:
      - "8761:8761"
  gateway-server:
    build: ./gateway-server
    hostname: gateway-server
    ports:
      - "8090:8090"
    environment:
      - "EUREKA_SERVER=eureka-server"
  clothing-db:
    image: mysql
    ports:
      - "3318:3306"
    volumes:
      - volumen-clothing:/var/lib/mysql
    environment:
      - "MYSQL_DATABASE=clothing-db"
      - "MYSQL_ROOT_PASSWORD=12345"
  order-db:
    image: mysql
    ports:
      - "3309:3306"
    volumes:
      - volumen-order:/var/lib/mysql
    environment:
      - "MYSQL_DATABASE=order-db"
      - "MYSQL_ROOT_PASSWORD=12345"
  users-db:
    image: mysql
    ports:
      - "3307:3306"
    volumes:
      - volumen-users:/var/lib/mysql
    environment:
      - "MYSQL_DATABASE=users-db"
      - "MYSQL_ROOT_PASSWORD=12345"
  zookeeper:
    image: library/zookeeper:3.7.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      HOSTNAME_COMMAND: hostname -i | awk '{print $$1}'
      KAFKA_HEAP_OPTS: -Xmx3G -Xms1G
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "orders:1:1"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://_{HOSTNAME_COMMAND}:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_MESSAGE_MAX_BYTES: 10485880
      KAFKA_NUM_PARTITIONS: 8
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    ports:
      - "8181:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    depends_on:
      - kafka

  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    restart: on-failure
    hostname: kowl
    volumes:
      - ./kowl-config.yaml:/etc/kowl/config.yaml
    ports:
      - "8180:8080"
    environment:
      KAFKA_SCHEMAREGISTRY_ENABLED: "true"
      KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - schema-registry
      - kafka
volumes:
  volumen-order:
  volumen-clothing:
  volumen-users:

networks:
  local: